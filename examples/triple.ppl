{- { www | w \in {x,y}* } -}

data Char = x | y;
data String = Nil | Cons Char String;
data Streeng = Eps | Trm Char | Cat Streeng Streeng;
data Maybe a = None | Some a;

define streeqh st s =
  case st of
    | Eps -> Some s
    | Trm c -> (case s of Nil -> None | Cons c' s -> if c == c' then Some s else None)
    | Cat st1 st2 ->
      let s' = streeqh st1 s in
        case s' of None -> None | Some s' -> streeqh st2 s';
define streeq st s =
  let s' = streeqh st s in
    case s' of None -> False | Some s' -> case s' of Nil -> True | Cons _ _ -> False;

define concat s1 s2 = case s1 of
  | Nil -> s2
  | Cons a s1 -> let s3 = concat s1 s2 in Cons a s3;

define S = let (A, B, C) = P in Cat A (Cat B C);
define P = amb (Eps, Eps, Eps) (let (A, B, C) = P in (Cat (Trm x) A, Cat (Trm x) B, Cat (Trm x) C));-- (let (A, B, C) = P in (Cat (Trm y) A, Cat (Trm y) B, Cat (Trm y) C));

define input = Cons x (Cons x (Cons x Nil));

streeq S input;